Запуск проекта:
    python -m pip install Django - шоб работали команды и сервер Джанго
    pip install psycopg2 - шоб база данных работала

admin:
    login - admin
    mail - admin@mail.ru
    password - admin

Diploma - основные настройки django
ripc - часть, которая присоединяется к diploma, логически наша основа сайта
для отдельных сервисов (например сканер Ильи и Семы) делаем отдельную папку называем как хотим (service_name),
 копируем структуру с ripc и в settings и urls diploma подключаем новый отдельный сервис(service_name)

 При изменении моделей:
    python manage.py makemigrations - создать миграцию, если изменяли модельки
    python manage.py migrate - применить миграцию, то есть обновить базу данных по моделькам

    python manage.py createsuperuser - создать учетную админа, в начале readme просто мои данные для него

    python manage.py flush - очистить бд (аккуратней с этим, когда будет общая бд, сотрет все у всех)

Пакет для форм с использованием бутстрапа:
    pip install django-crispy-forms
    pip install crispy-bootstrap5

В папке static сохраняем статичные файлы (картинки, js, css)
css и js лучше делать отдельные файлы на отдельную страницу
проект у нас все равно локально (обычно так нельзя, есть ограничение на кол-во файлов на серверах)


В папку logic создаем необходимую папку, куда пишем логические функции и классы, и во view вызываем их
во view надо будет сделать Import
файл view не засорять !!!!

Файл urls - маршрутизатор

Папки templates работают в стиле blade от laravel, вспоминаем, читаем, не мусорим
template в корне, для общих моментов разных страниц, внутри сервисов уже то, что относится к сервису

gitignore не трогаем, пишем мне, лишнего не закидывать в гит, пока что лишнее:
    .idea
    /venv

docker run --name pg -p 5432:5432 -e POSTGRES_DB=postgres -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=qwerty123 -d postgres

В организациях и регионах, может быть несколько представителей
Все по местоположению, только админы могут видеть все